generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String        @id @default(uuid())
  firstName     String
  lastName      String
  email         String        @unique
  emailVerified Boolean
  phone         String?
  password      String
  role          Role          @default(USER)
  wishlistId    String?
  Account       Account[]
  addressId     String?
  address       Address[]
  cart          CartProduct[]
  orderHistory  Order[]
  payment       Payment[]
  review        Review[]
  Session       Session[]
  wishlist      Wishlist?     @relation(fields: [wishlistId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Category {
  id       String    @id @default(uuid())
  title    String
  image    String
  products Product[]
}

model Address {
  id             String   @id @default(uuid())
  userId         String
  city           String
  state          String
  postalCode     String
  name           String
  addressLine    String
  alternatePhone String?
  phone          String
  landmark       String
  user           User     @relation(fields: [userId], references: [id])
  Order          Order[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Wishlist {
  id        String    @id @default(uuid())
  userId    String
  productId String
  Product   Product[]
  User      User[]

  @@unique([userId, productId])
}

model Product {
  id           String        @id @default(uuid())
  name         String
  images       String[]
  description  String
  price        Float
  sellingPrice Float?
  stock        Int           @default(0)
  totalSale    Int           @default(0)
  ratings      Float?
  categoryId   String
  wishlistId   String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  CartProduct  CartProduct[]
  Order        Order[]
  category     Category      @relation(fields: [categoryId], references: [id])
  Review       Review[]
  Wishlist     Wishlist?     @relation(fields: [wishlistId], references: [id])
}

model CartProduct {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

enum OrderStatus {
  ORDERED
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  CONFIRMED
  CANCELLED
  RETURNED
}

model Order {
  id              String      @id @default(uuid())
  orderNumber     String      @unique
  userName        String
  userPhone       String
  paymentToken    String?
  paid            Boolean     @default(false)
  addressId       String
  deliveryFee     Float?      @default(0)
  serviceFee      Float?      @default(0)
  status          OrderStatus @default(ORDERED)
  discount        Float?      @default(0)
  deliveryTime    DateTime?   @default(now())
  orderDate       DateTime    @default(now())
  userId          String
  productId       String
  quantity        Int
  subtotal        Float
  deliveryAddress Address     @relation(fields: [addressId], references: [id])
  product         Product     @relation(fields: [productId], references: [id])
  User            User        @relation(fields: [userId], references: [id])
  Payment         Payment[]
  Shipping        Shipping[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Review {
  id        String   @id @default(uuid())
  productId String
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Payment {
  id            String   @id @default(uuid())
  userId        String
  orderId       String
  amount        Float
  paymentMethod String
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  order         Order    @relation(fields: [orderId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model Shipping {
  id                String   @id @default(uuid())
  orderId           String
  trackingNumber    String
  carrier           String
  status            String   @default("pending")
  estimatedDelivery DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  order             Order    @relation(fields: [orderId], references: [id])
}

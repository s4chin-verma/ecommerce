generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(uuid())
  userId    String
  amount    Int
  currency  String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(uuid())
  name          String
  role          Role      @default(USER)
  email         String    @unique
  emailVerified Boolean
  phone         String?
  password      String
  address       Address[]
  cart          Cart[]
  orderHistory  Order[]
  payment       Payment[]
  review        Review[]
  wishlist      Wishlist?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  productId String
  userId    String
  rating    Int
  comment   String
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           String         @id @default(uuid())
  name         String
  description  String
  price        Float
  sellingPrice Float?
  stock        Int            @default(0)
  totalSale    Int            @default(0)
  ratings      Float?
  images       String[]
  categoryId   String
  category     Category       @relation(fields: [categoryId], references: [id])
  cartProduct  CartProduct[]
  orderProduct OrderProduct[]
  wishlistId   String?
  Wishlist     Wishlist?      @relation(fields: [wishlistId], references: [id])
  reviews      Review[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum OrderStatus {
  ORDERED
  SHIPPED
  OUTFOR
  DELIVERED
}

model Order {
  id              String         @id @default(cuid())
  orderNumber     String         @unique
  cart            Json[]
  orderDate       DateTime       @default(now())
  deliveryTime    DateTime?      @default(now())
  userName        String
  userEmail       String
  user            User           @relation(fields: [userEmail], references: [email])
  userPhone       String
  paymentToken    String?
  paid            Boolean        @default(false)
  delivery        Delivery?
  addressId       String
  deliveryAddress Address        @relation(fields: [addressId], references: [id])
  deliveryFee     Float          @default(4)
  serviceFee      Float          @default(3)
  status          OrderStatus    @default(ORDERED)
  note            String?
  discount        Float?
  total           Float
  OrderProduct    OrderProduct[]
  Payment         Payment[]
  Shipping        Shipping[]
}

model Delivery {
  id          String @id @default(cuid())
  driverName  String
  driverEmail String
  driverPhone String
  order       Order  @relation(fields: [orderNum], references: [orderNumber])
  orderNum    String @unique // To be used to filter orders that belong to the customer
}

model OrderProduct {
  id        String  @id @default(uuid())
  productId String
  orderId   String
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Cart {
  id          String        @id @default(uuid())
  userId      String
  totalAmount Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  products    CartProduct[]
}

model CartProduct {
  id        String  @id @default(uuid())
  productId String
  cartId    String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Payment {
  id            String   @id @default(uuid())
  userId        String
  orderId       String
  amount        Float
  paymentMethod String
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  order         Order    @relation(fields: [orderId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model Address {
  id           String   @id @default(uuid())
  userId       String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  Order        Order[]
}

model Wishlist {
  id        String    @id @default(uuid())
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  user      User      @relation(fields: [userId], references: [id])
}

model Shipping {
  id                String   @id @default(uuid())
  orderId           String
  trackingNumber    String
  carrier           String
  status            String   @default("pending")
  estimatedDelivery DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  order             Order    @relation(fields: [orderId], references: [id])
}

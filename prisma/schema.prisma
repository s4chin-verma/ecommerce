// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified Boolean
  password      String
  address       Address[]
  phone         String?
  orderHistory  Order[]
  wishlist      Wishlist?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  review        Review[]
  cart          Cart[]
  payment       Payment[]
}

model Review {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           String         @id @default(uuid())
  name         String
  description  String
  price        Float
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   String
  images       String[]
  stock        Int            @default(0)
  reviews      Review[]
  ratings      Float?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  orderProduct OrderProduct[]
  cartProduct  CartProduct[]
  Wishlist     Wishlist?      @relation(fields: [wishlistId], references: [id])
  wishlistId   String?
}

model Order {
  id              String         @id @default(uuid())
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  products        OrderProduct[]
  totalAmount     Float
  shippingAddress String
  billingAddress  String
  status          String         @default("pending")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  payment         Payment[]
  shipping        Shipping[]
}

model OrderProduct {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  quantity  Int
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Cart {
  id          String        @id @default(uuid())
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  products    CartProduct[]
  totalAmount Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model CartProduct {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  quantity  Int
}

model Payment {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       String
  amount        Float
  paymentMethod String
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Address {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Wishlist {
  id        String    @id @default(uuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Shipping {
  id                String   @id @default(uuid())
  order             Order    @relation(fields: [orderId], references: [id])
  orderId           String
  trackingNumber    String
  carrier           String
  status            String   @default("pending")
  estimatedDelivery DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

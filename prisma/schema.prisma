generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String    @id @default(uuid())
  firstName      String
  lastName       String
  gender         String?
  addressId      String?
  profilePicture String?
  email          String    @unique
  emailVerified  Boolean
  phone          String?
  password       String
  role           Role      @default(USER)
  Account        Account[]
  Session        Session[]
  address        Address[]
  cart           Cart[]
  orderHistory   Order[]
  payment        Payment[]
  review         Review[]
  wishlist       Wishlist?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Review {
  id        String   @id @default(uuid())
  productId String
  userId    String
  rating    Int
  comment   String
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           String        @id @default(uuid())
  name         String
  images       String[]
  description  String
  price        Float
  sellingPrice Float?
  stock        Int           @default(0)
  totalSale    Int           @default(0)
  ratings      Float?
  categoryId   String
  category     Category      @relation(fields: [categoryId], references: [id])
  CartProduct  CartProduct[]
  Wishlist     Wishlist?     @relation(fields: [wishlistId], references: [id])
  wishlistId   String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Review       Review[]
  Order        Order[]
}

enum OrderStatus {
  ORDERED
  CONFIRMED
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  RETURNED
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String
  userName        String
  userPhone       String
  productId       String
  paymentToken    String?
  quantity        Int
  addressId       String
  deliveryFee     Float       @default(4)
  serviceFee      Float       @default(3)
  discount        Float?
  subtotal        Float
  paid            Boolean     @default(false)
  orderDate       DateTime    @default(now())
  deliveryTime    DateTime?   @default(now())
  status          OrderStatus @default(ORDERED)
  deliveryAddress Address     @relation(fields: [addressId], references: [id])
  User            User?       @relation(fields: [userId], references: [id])
  product         Product?    @relation(fields: [productId], references: [id])
  Payment         Payment[]
  Shipping        Shipping[]
}

model Category {
  id          String    @id @default(uuid())
  title       String
  image       String
  description String
  products    Product[]
}

model Cart {
  id          String        @id @default(uuid())
  userId      String
  totalAmount Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  products    CartProduct[]
}

model CartProduct {
  id        String  @id @default(uuid())
  productId String
  cartId    String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Payment {
  id            String   @id @default(uuid())
  userId        String
  orderId       String
  amount        Float
  paymentMethod String
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  order         Order    @relation(fields: [orderId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model Address {
  id           String   @id @default(uuid())
  userId       String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  Order        Order[]
}

model Wishlist {
  id        String    @id @default(uuid())
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  user      User      @relation(fields: [userId], references: [id])
}

model Shipping {
  id                String   @id @default(uuid())
  orderId           String
  trackingNumber    String
  carrier           String
  status            String   @default("pending")
  estimatedDelivery DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  order             Order    @relation(fields: [orderId], references: [id])
}
